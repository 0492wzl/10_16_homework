庄文湖  10207160520

先来先服务FCFS和短作业优先SJF进程调度算法

程序代码：JAVA语言
import java.awt.*;
import java.util.*;
public class 进程调度模拟aoqun {
private static Formatter f=new Formatter(System.out);
public float[] s1;

/**
 * @param args
 */
public static void main(String[] args) {
Scanner s=new Scanner(System.in);
System.out.println("默认当第一个进程完成时，所有其他进程都已经提交");
System.out.println("请输入进程个数：");
final int n=s.nextInt();
int[] Tri=new int[n];
float[] Tsi=new float[n];
System.out.println("请输入各个进程执行时间：");
for(int i=0;i<n;i++){
Tri[i]=s.nextInt();
}
for(int i=0;i<n;i++)
if(Tri[i]<=0 )System.out.println("第"+(i+1)+"个ERROR!");
System.out.println();

System.out.println("请输入各个进程开始时间：");
for(int i=0;i<n;i++){
Tsi[i]=s.nextFloat();
}
for(int i=0;i<n;i++)
if(Tsi[i]<0)System.out.println("第"+(i+1)+"个ERROR!");

System.out.println("经过FCFS调度，进程的处理排序如下：");
System.out.println("进程序号         "+"进程开始                                 "+"进程执行");//按照进程开始时间由小到大排序
for(int i=0;i<n;i++)
for(int j=0;j<n-i-1;j++)
if(Tsi[j]>Tsi[j+1]){
float t;
t=Tsi[j];
Tsi[j]=Tsi[j+1];
Tsi[j+1]=t;
int d1;
d1=Tri[j];
Tri[j]=Tri[j+1];
Tri[j+1]=d1;
}
for(int i=1;i<=n;i++){
if(Tsi[n-1]>Tri[0]+Tsi[0])System.out.println("默认当第一个进程完成时，所有其他进程都已经提交，您输入的第一个进程完成时，所有其他进程并未提交，ERROR!");
f.format("%d       %f        %d\n",i,Tsi[i-1],Tri[i-1]);
}

float[] s2=new float[n];
        float c2=0;
for(int i=0;i<n;i++){
c2=c2+Tri[i];
s2[i]=(Tsi[0]-Tsi[i])+c2;
if(s2[i]<0)
System.out.println("你好！你输入的第"+(i+1)+"个进程开始时间过大，占用CPU资源但不利用，造成浪费，负数部分即是处理该进程浪费的CPU时间！ERROR!");
}
System.out.println("经过FCFS调度，进程的处理排序，周转时间以及带权周转时间如下：");
System.out.println("进程序号         "+"进程开始                                 "+"进程执行"+"              周转时间                                   "+"                       带权周转时间");
for(int i=1;i<=n;i++){
f.format("%d       %f        %d       %f             %f\n",i,Tsi[i-1],Tri[i-1],s2[i-1],s2[i-1]/Tri[i-1]);
}

System.out.println("经过最短进程优先调度，进程的处理排序如下：");
System.out.println("进程序号         "+"进程开始                                 "+"进程执行");
        float[] s1=new float[n];
        s1[0]=Tri[0];
for(int i=1;i<n;i++)
for(int j=1;j<n-i;j++)
if(Tri[j]>Tri[j+1]){
int t;
t=Tri[j];
Tri[j]=Tri[j+1];
Tri[j+1]=t;
float d1;
d1=Tsi[j];
Tsi[j]=Tsi[j+1];
Tsi[j+1]=d1;
}
for(int i=1;i<=n;i++){
f.format("%d       %f        %d\n",i,Tsi[i-1],Tri[i-1]);
}
        float c=0;
for(int i=1;i<n;i++){
c=c+Tri[i];
s1[i]=(s1[0]-Tsi[i])+c;
if(s1[i]<0)
System.out.println("你好！你输入的第"+(i+1)+"个进程开始时间过大，占用CPU资源但不利用，造成浪费，负数部分即是处理该进程浪费的CPU时间！ERROR!");
}
System.out.println("经过最短进程调度，进程的处理排序，周转时间以及带权周转时间如下：");
System.out.println("进程序号         "+"进程开始                                 "+"进程执行"+"              周转时间                                   "+"                       带权周转时间");
for(int i=1;i<=n;i++){
f.format("%d       %f        %d       %f             %f\n",i,Tsi[i-1],Tri[i-1],s1[i-1],s1[i-1]/Tri[i-1]);
}
// TODO Auto-generated method stub

}

} 
