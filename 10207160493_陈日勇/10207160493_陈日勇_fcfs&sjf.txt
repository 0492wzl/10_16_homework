#include<iostream>
using namespace std;
#define MaxNum 100
int  ArrivalTime[MaxNum];
double  ServiceTime[MaxNum];
double  FinishTime[MaxNum];
double  WholeTime[MaxNum];
double  AVEWholeTime[MaxNum];
double  AVEWeightWholeTime[MaxNum];
double  WeightWholeTime[MaxNum];
double AverageWT; 
double AverageWWT;
double AllTime,WeightAllTime;
double a[MaxNum];
int b[MaxNum];
int c[MaxNum];
int d[MaxNum];
int ProcessNum;
void FCFS();
void SJF();
void uuu();

void uuu()
{
	cout<<"周转时间：";
	for(int i=0;i<ProcessNum;i++)
	{
		WholeTime[i]=FinishTime[i]-ArrivalTime[i];
	}
	for(int i=0;i<ProcessNum;i++)
	{
		cout<<WholeTime[i]<<"  ";
	}
	cout<<endl;
	for(int i=0;i<ProcessNum;i++)
	{
		AVEWholeTime[i]=WholeTime[i];
		
	}
	for(int i=0;i<ProcessNum-1;i++)
	{
		AVEWholeTime[i+1]=AVEWholeTime[i]+AVEWholeTime[i+1];
		AllTime=AVEWholeTime[i+1];
	}
	
	AverageWT=AllTime/ProcessNum;
	cout<<"平均周转时间:"<<AverageWT<<endl;
	cout<<"带权周转时间：";
	for(int i=0;i<ProcessNum;i++)
	{
		WeightWholeTime[i]=WholeTime[i]/ServiceTime[i];
	}
	for(int i=0;i<ProcessNum;i++)
	{
		cout<<WeightWholeTime[i]<<"  ";
	}
	cout<<endl;
	for(int i=0;i<ProcessNum;i++)
	{
		AVEWeightWholeTime[i]=WeightWholeTime[i];
		
	}
	for(int i=0;i<ProcessNum-1;i++)
	{
		AVEWeightWholeTime[i+1]=AVEWeightWholeTime[i]+AVEWeightWholeTime[i+1];
		WeightAllTime=AVEWeightWholeTime[i+1];
		
	}
	AverageWWT=WeightAllTime/ProcessNum;
	
	cout<<"平均带权周转时间:"<<AverageWWT<<endl;
}
void FCFS()
{
	
	cout<<"----------先来先服务算法----------"<<endl;
	
	for(int i=0;i<ProcessNum;i++)
	{
		FinishTime[i]=ServiceTime[i];
	}
	for(int i=0;i<ProcessNum;i++)
	{
		FinishTime[i+1]=FinishTime[i]+FinishTime[i+1];
	}
	for(int i=0;i<ProcessNum-1;i++)
	{
		cout<<"时刻"<<FinishTime[i]<<":第"<<i+2<<"个进程开始运行。"<<endl;
	}
	cout<<"FCFS完成时间：";
	for(int i=0;i<ProcessNum;i++)
	{
		cout<<FinishTime[i]<<"  ";
	}
	cout<<endl;
	uuu();
	
}
void SJF()
{
	
	cout<<"----------短作业优先算法----------"<<endl;
	
	for(int i=0;i<ProcessNum;i++)
	{
		a[i]=ServiceTime[i];
	}
	for(int i=1;i<ProcessNum-1;i++)//实现从第一位开始排序
	{
		double exchange;
		for(int j=i+1;j<ProcessNum;j++)
		{
			if(a[i]>a[j])
			{
				exchange=a[i];
				a[i]=a[j];
				a[j]=exchange;
			}
		}
	}
	FinishTime[0]=ServiceTime[0];
	for(int i=1;i<ProcessNum;i++)//获取数组下标
	{
		
		for(int j=1;j<ProcessNum;j++)
		{
			if(a[i]==ServiceTime[j])
			{
				b[i]=j;
				
				break;
			}
		}
	}
	for(int i=1;i<ProcessNum;i++)
	{
		if(FinishTime[b[i-1]]<ArrivalTime[b[i]])
		{
			
			int temp;
			temp=b[i];
			b[i]=b[i+1];
			b[i+1]=temp;
		}
		
		a[i]=ServiceTime[b[i]];
		a[i]=a[i-1]+a[i];
		
		FinishTime[b[i]]=a[i];
	}
	for(int i=0;i<ProcessNum-1;i++)
	{
		cout<<"时刻"<<FinishTime[i]<<":第"<<i+2<<"个进程开始运行。"<<endl;
	}
	cout<<"SJF完成时间：";
	for(int i=0;i<ProcessNum;i++)
	{
		cout<<FinishTime[i]<<"  ";
	}
	cout<<endl;
	uuu();
	
}
void main()
{  
	
	cout<<"----------FCFS&SJF算法----------"<<endl;
	cout<<endl;
	cout<<"请输入进程个数：";
	cin>>ProcessNum;
	cout<<"输入进程到达时间：";
	cout<<endl;
	for(int i=0;i<ProcessNum;i++)
	{
		cin>>ArrivalTime[i];		
	}
	cout<<endl;
	cout<<"请输入进程服务时间：";
	cout<<endl;
	for(int i=0;i<ProcessNum;i++)
	{
		cin>>ServiceTime[i];
		
	}
	cout<<endl;
	 FCFS();
	 SJF();
	 int p;
	 cin>>p;
}
