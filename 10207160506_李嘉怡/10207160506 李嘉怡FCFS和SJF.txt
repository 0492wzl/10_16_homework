
#include<iostream>
using namespace std;
struct Process//定义进程控制块
	{  char name[10];// 进程名
		int num; //进程优先级
		float arive; //进程到达时间
		float run; //进程运行时间
		float finish; //进程完成时间
		float time; //进程周转时间
		float dqzz; //进程带权周转时间
		bool run_flag; //进程是否运行标志
	};
float finish = 0.0f;
void numnt(Process pro[],int n)//显示进程
{  for(int i=0;i<=n-1;i++)
	{   cout<<"进程"<<i+1<<":"<<pro[i].name<<"  "<<endl;
       cout<<"进程"<<i+1<<"优先级:"<<pro[i].num<<"  "<<endl;
		cout<<"进程"<<i+1<<"到达时间:"<<pro[i].arive<<"  "<<endl;
		cout<<"进程"<<i+1<<"运行时间:"<<pro[i].run<<"  "<<endl;
	}
}
void fcfs(Process pro[],int k)//先来先服务法
{  for(int i = 0 ; i <=k-2;i++)
	{  int min = i;
		for(int j = i+1;j<k;j++)
		{  if(pro[j].arive < pro[min].arive)
			{  min = j;   }
		}
		Process tmpPrp;
		memcpy(&tmpPrp,&pro[i],sizeof(Process));
		memcpy(&pro[i],&pro[min],sizeof(Process));
		memcpy(&pro[min],&tmpPrp,sizeof(Process));
	}
   int n;
	cout<<"进程调度顺序为:";
	for(n = 0;n <= k-1;n++)
    cout<<pro[n].name<<" ";
	cout<<endl;
	pro[0].finish = pro[0].arive+pro[0].run;
    pro[0].time = pro[0].finish - pro[0].arive;
	pro[0].dqzz = pro[0].time/pro[0].run;
	for(n=1;n <= k;n++)
	{  pro[n].finish = pro[n].run+pro[n-1].finish;
		pro[n].time = pro[n].finish-pro[n].arive;
	}
	float averagezz,averagedqzz;
	averagezz=0;
	averagedqzz=0;
	for(n=0;n<=k-1;n++)
	    averagezz+=pro[n].time;  
	averagezz=averagezz/k;
    cout<<"平均周转时间为:"<<averagezz<<endl;
	for(n=0;n<=k-1;n++)
	{   pro[n].dqzz=pro[n].time/pro[n].run;
		averagedqzz += pro[n].dqzz;
	}
	averagedqzz=averagedqzz/k;
    cout<<"带权平均周转时间为:"<<averagedqzz<<endl;  }
int ShouldRun(Process pro[],int n)//判定优先级并返回在进程表中索引
{   int index = -1;
	for(int i = 0 ; i < n; i++)
	{   
       if(pro[i].arive <= finish && pro[i].run_flag == false)
		{  index = i;
			if(i < n-1)
			{  for(i = i+1; i <= n-1;i++)
				{ 
                  if(pro[i].arive <= finish &&pro[i].num
                   > pro[index].num&& pro[i].run_flag == false)
					{  index = i;
					}
				}
				return index;
			}
			return index;
		}
	}
	return index;
}
void num(Process pro[],int n)//优先级法
{  int i , j;
	int min = 0;//找出提交时间最早的与第一个交换数据
	for(i =1; i < n;i++)
	{  if(pro[i].arive<pro[min].arive)
		{  min = i;
		}
	}
	Process tmpPrp;
	memcpy(&tmpPrp,&pro[0],sizeof(Process));
	memcpy(&pro[0],&pro[min],sizeof(Process));
	memcpy(&pro[min],&tmpPrp,sizeof(Process));
    cout<<"进程调度顺序为:";
    cout<<pro[0].name<<" ";
	pro[0].finish = pro[0].arive+pro[0].run;
	pro[0].time = pro[0].finish - pro[0].arive;
	pro[0].dqzz = pro[0].time/pro[0].run;
	pro[0].run_flag = true;
    finish = pro[0].finish;
    for(i = 1;i <= n-1; i++ )
	{  
       int index = ShouldRun(pro,n);
		if(index == -1)
		{  cout<<"ERROR"<<endl;
			return;
		}
		cout<<pro[index].name<<"  ";
		pro[index].run_flag = true;
		pro[index].finish = finish + pro[index].run;
		pro[index].time = pro[index].finish - pro[index].arive;
		pro[index].dqzz = pro[index].time /pro[index].run;
       finish += pro[index].run;
	}
	float zzTime = 0.0f;
	float dqzzTime = 0.0f;
	for(j = 0 ; j < n ; j++)
	{  
       zzTime += pro[j].time;
		dqzzTime += pro[j].dqzz;
	}
	zzTime /= n;
	dqzzTime /= n;

	cout<<"平均周转时间："<<zzTime<<endl;
	cout<<"平均带权周转时间："<<dqzzTime<<endl;
	return ;
}
int main()
{  while(true)
	{
	int i,j;
	int n;
	cout<<"请输入进程个数:";
	cin>>n;
	Process *pro = new Process[n];
	for(i = 0 ; i < n; i++)
	memset(&pro[i],0,sizeof(Process));
   cout<<"请输入进程名:";
	for(i=0;i<=n-1;i++)
	      cin>>pro[i].name;
	cout<<"请输入进程优先级:";
	for(i=0;i<=n-1;i++)
	      cin>>pro[i].num;
	cout<<"请输入各进程到达时间:";
	for(i=0;i<=n-1;i++)
	      cin>>pro[i].arive;
	cout<<"请输入各进程运行时间:";
	for(i=0;i<=n-1;i++)
	      cin>>pro[i].run;
    cout<<"请选择您要使用的进程调度算法"<<endl;
	cout<<"1.先来先服务法:"<<endl;
	cout<<"2.优先级法:"<<endl;
	cout<<"其他.退出:"<<endl;
    cin>>j;
	if(j==1)
	{
		numnt(pro,n);
		fcfs(pro,n);
	}
	else if(j==2)
	{
		numnt(pro,n);
        num(pro,n);
	}
	else 
	{    return 0;
	}
	}
}
