1、<程序>
#include<stdio.h>
main(){ 
   int p1,p2;  
 while((p1=fork())==-1);  
  if(p1==0)     
  putchar('b');   
 else   {    while((p2=fork())==-1);   
 if(p2==0)       putchar('c');   
 else       putchar('a');    }}
<运行结果>bca分析：运行结果有可能是bac等情况。原因：fork（）创建进程所需时间要多于输出一个字符的时间，因此在主进程创建进程2的同时，进程1就输出了“b”，而进程2和主进程的输出次序是随机性的。 

2、<程序1>
#include<stdio.h>
main(){    
int p1,p2,i;    
while((p1=fork())==-1);  
  if(p1==0)       
for(i=0;i<40;i++)       
    printf("This is a process 1!\n",i);  
  else   {    while((p2=fork())==-1);    
if(p2==0)      
 for(i=0;i<40;i++)          
 printf("This is a process 2!\n",i);  
  else       for(i=0;i<40;i++)           
printf("This is a process 3!\n",i);    }}
<运行结果>This is a process 1!This is a process 2!This is a process 3!This is a process 3!分析：由于printf（）输出的字符串之间不会被中断，因此，字符串内部的字符顺序输出时不变。但是，由于进程并发执行时的调度顺序和父子进程的抢占处理机问题，输出字符串的顺序和先后随着执行的不同而发生变化。


<程序2>
#include<stdio.h>
#include<unistd.h>
main(){   
 int p1,p2,i;  
  while((p1=fork())==-1); 
   if(p1==0)    {       
lockf(1,1,0);      
 for(i=0;i<40;i++)          
 printf("This is a process 1!\n",i);   
    lockf(1,0,0);    }  

  else   {       while((p2=fork())==-1);   
    if(p2==0)       {          lockf(1,1,0);   
       for(i=0;i<40;i++)         
     printf("This is a process 2!\n",i);       
   lockf(1,0,0);        }   
 else    {          lockf(1,1,0);         
 for(i=0;i<40;i++)       
       printf("This is a process 3!\n",i);      
    lockf(1,0,0);        }       }}
<运行结果>This is a process 1!This is a process 2!This is a process 3!This is a process 3!分析：不同进程之间不存在共享临界资源问题，所以，效果与不加锁是一样的。